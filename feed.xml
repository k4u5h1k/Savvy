<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>For everything technical and interesting</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 12 Feb 2022 17:20:17 +0530</pubDate>
    <lastBuildDate>Sat, 12 Feb 2022 17:20:17 +0530</lastBuildDate>
    <generator>Jekyll v4.2.1</generator>
    
      <item>
        <title>Self-Hosting for Dummies</title>
        <description>&lt;p&gt;Recently, my student credits on Azure ran out.&lt;/p&gt;

&lt;p&gt;So everything I had running there - which was an ubuntu box, many serverless functions, two static web apps (with static ips) and a small k8s cluster - now had to be transferred to a pay-as-you-go model. Smashing the numbers into an online monthly cost calculator spit out an amount I would rather not pay. That and 13 year old me’s dream of owning a Raspberry Pi sparked the idea of hosting my own web infrastructure. And why the hell not.&lt;/p&gt;

&lt;p&gt;Great, we now have a Pi, what next?&lt;/p&gt;

&lt;h1 id=&quot;step---1---set-up-the-pi&quot;&gt;STEP - 1 - Set up the Pi&lt;/h1&gt;

&lt;p&gt;Headless setup of the Pi is extremely simple. 
On your PC/Laptop,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simply grab &lt;a href=&quot;https://github.com/raspberrypi/rpi-imager/releases/&quot;&gt;Advanced Pi Imager&lt;/a&gt; as suggested by the official site and open it up.&lt;/li&gt;
  &lt;li&gt;Slide your SD card in.&lt;/li&gt;
  &lt;li&gt;Select the default Raspbian OS and location as SD.&lt;/li&gt;
  &lt;li&gt;Now, hit ‘Ctrl-Shift-X’ to bring up advanced options.&lt;/li&gt;
  &lt;li&gt;Put in your Wifi credentials and enable &lt;em&gt;ssh&lt;/em&gt; as henceforth we will talk to the pi wirelessly.&lt;/li&gt;
  &lt;li&gt;Set locale to your location to configure time. Although you can also do this later from within the Pi.&lt;/li&gt;
  &lt;li&gt;Hit run.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now plug the SD into your Pi connect it to your power supply. Give it 10-30 seconds to boot, then from your PC/laptop terminal, hit&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh pi@raspberrypi.local&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If that fails, do,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nslookup raspberrypi.local&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If the output of that looks like&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20220122114634636.png&quot; alt=&quot;image-20220122114634636&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Grab your address corresponding to my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.29.31&lt;/code&gt; and do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh pi@YOUR_ADDRESS&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The password is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raspberrypi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, if you are logged into your pi via ssh,&lt;/p&gt;

&lt;p&gt;(Which should look like this)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20220122115229683.png&quot; alt=&quot;image-20220122115229683&quot; /&gt;&lt;/p&gt;

&lt;p&gt;you should change your password. For this, hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passwd&lt;/code&gt;. Type in your old (&lt;em&gt;raspberrypi&lt;/em&gt;) and new passwords as prompted.&lt;/p&gt;

&lt;h1 id=&quot;step---2---set-up-nginx-on-your-pi&quot;&gt;STEP - 2 - Set up NGINX on your Pi&lt;/h1&gt;

&lt;p&gt;NGINX is our web server of choice, which will see the url requested by the client and serve the appropriate webpage. so something like &lt;a href=&quot;http://musings.kaushik.me&quot;&gt;http://musings.kaushik.me&lt;/a&gt; will take you to where I have placed the musings html in my Pi, while &lt;a href=&quot;http://savvy.kaushik.me&quot;&gt;http://savvy.kaushik.me&lt;/a&gt; will take you to the code location of savvy.&lt;/p&gt;

&lt;p&gt;To install NGINX, simply use&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If  that fails, follow the &lt;a href=&quot;https://www.nginx.com/resources/wiki/start/topics/tutorials/install/#official-debian-ubuntu-packages&quot;&gt;official guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once installed you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo systemctl start nginx&lt;/code&gt; and access http://raspberrypi.local to confirm that our NGINX is running.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20220122141300067.png&quot; alt=&quot;image-20220122141300067&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can begin to configure your NGINX.&lt;/p&gt;

&lt;p&gt;All your custom configuration must go into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/nginx/conf.d/server.conf&lt;/code&gt;. If that server.conf file does not exist then you may create it, and it will automatically be included (everything in conf.d is included by default) in the main config.&lt;/p&gt;

&lt;p&gt;Use the &lt;a href=&quot;http://nginx.org/en/docs/beginners_guide.html&quot;&gt;official guide&lt;/a&gt; for more info into NGINX configuration.&lt;/p&gt;

&lt;p&gt;My config looks like this&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pi@raspberrypi:~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/nginx/conf.d/server.conf
server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    server_name musings.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    root /home/pi/sites/musings&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        index index.html&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    server_name savvy.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    root /home/pi/sites/savvy&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        index index.html&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You may not be able to test virtual hosts for now since that url to not mapped to the raspberrypi.local IP, but we will be able to do that after the next step.&lt;/p&gt;

&lt;h1 id=&quot;step---3---explore-options-for-exposing-your-pi-to-the-internet&quot;&gt;STEP - 3 - Explore Options for exposing your Pi to the Internet&lt;/h1&gt;

&lt;p&gt;Now would be a good time for me to give an overview of the process that follows. The IP you used to connect to the Pi in step 1 is a private IP. This is only valid when someone wants to connect to it from your WFI network. To expose your Pi to the public internet and reliably access it, you need a static public IP address. This is the most tricky part of our mission, and done conventionally, costs a good amount of money. However, our journey was born out of a need to save money. So we will try to achieve the same without paying a cent.&lt;/p&gt;

&lt;p&gt;This can be done using &lt;em&gt;Port Forwarding&lt;/em&gt; or &lt;em&gt;Port Tunneling&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So assuming we have a server exposed to the public internet i.e, with a public IP, we can use Port Forwarding to “&lt;em&gt;forward&lt;/em&gt;” all the requests from a port P1 of the server to a port P2 on our Pi. Our local NGINX server will be listening on the port P2, which will respond to this request with our webpage or API response which will also be forwarded back to the client.&lt;/p&gt;

&lt;p&gt;Your options to do this is all follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Option 1 - &lt;a href=&quot;https://github.com/inconshreveable/ngrok&quot;&gt;NGROK&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Running ngrok on your Pi will spit out a public url that can be used to connect to it from anywhere. However for a static url, a recent update made it pay-to-use. However, this is an age old solution worth looking into.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Option 2 - &lt;a href=&quot;https://github.com/milio48/serveo&quot;&gt;Serveo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Serveo is a newer alternative to ngrok, which does the same thing but for free. This can be used if the next option is not suitable for you.&lt;/p&gt;

&lt;p&gt;So when you use Serveo, the url spit out is of the form &lt;em&gt;something.serveo.net&lt;/em&gt;, so in this option you are still relying on a third party to provide you access, which I wish to avoid. That is to say god forbid if serveo.net goes down, or they take down the free tier, you’re screwed. If this is not a valid concern in your case, this is a great choice.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Option 3 - &lt;a href=&quot;https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;amp;all-free-tier.sort-order=asc&amp;amp;awsf.Free%20Tier%20Types=*all&amp;amp;awsf.Free%20Tier%20Categories=*all&quot;&gt;Using an AWS/Azure free tier VM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our last option, and my option of choice, is to use the free tier AWS or Azure VM - that is by default given a public url (however if shut down and started up again, this url changes) - to act as the port forwarder for our Pi. Both providers offer 750 hours of VM use per month for 12 months exceeding which you must pay an hourly rate (around 0.01 dollars).&lt;/p&gt;

&lt;p&gt;However after 12 months you can move to the lowest tier (t3a.nano) on AWS which costs close to 0.0047 dollars an hour, working out to 3.5 dollars a month, which is cheaper than ngrok with added benefits such as accessing your pi from anywhere (by tunnelling to port 22) and while ngrok only allows one online process, here you can have as many as you want with &lt;em&gt;NGINX&lt;/em&gt; to handle the routing.&lt;/p&gt;

&lt;p&gt;This guide will henceforth follow option 3 with AWS.&lt;/p&gt;

&lt;h1 id=&quot;step---4---spin-up-a-free-tier-ec2-and-set-up-port-forwarding&quot;&gt;STEP - 4 - Spin Up a Free Tier EC2 and set up Port Forwarding&lt;/h1&gt;

&lt;p&gt;Sign up for AWS and use https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html to spin up a free tier vm.&lt;/p&gt;

&lt;p&gt;Once that is done, navigate to the ec2 tab of your aws console. Click on the instance’s row, then click on the security group id&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20220122143358834.png&quot; alt=&quot;image-20220122143358834&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will now edit our Inbound rules to open two ports for our server. Click on edit inbound rule.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20220122143448305.png&quot; alt=&quot;image-20220122143448305&quot; /&gt;&lt;/p&gt;

&lt;p&gt;then add two rules opening port 8080 for custom TCP and port 80 for HTTP traffic. Your configuration should look like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20220122143530576.png&quot; alt=&quot;image-20220122143530576&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cool you can now ssh into your EC2 and install NGINX using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo yum install nginx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then you need to copy your EC2 ssh key from your local machine to your Pi using scp.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp /something/something/myrsakey.pem pi@raspberrypi.local:~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now get your EC2’s url from here,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20220122144313166.png&quot; alt=&quot;image-20220122144313166&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And in another terminal tab, ssh into your Pi, and run this command to enable port forwarding from EC2 port 8080 to Pi’s port 80.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/lib/autossh/autossh &lt;span class=&quot;nt&quot;&gt;-M&lt;/span&gt; 0 &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 8080:localhost:80 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; /something/something/myrsa.pem ec2-user@YOUR_EC2_URL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Henceforth the requests to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOUR_EC2_URL:8080&lt;/code&gt; will be forwarded to port 80 of your Pi.&lt;/p&gt;

&lt;p&gt;I have used port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8080&lt;/code&gt; because port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80:localhost:80&lt;/code&gt; was throwing an error. So you can make a small change to the default EC2 nginx config to redirect all requests that its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port 80&lt;/code&gt; recieves to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8080&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ec2-user@ip-172-31-38-69 ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/nginx/conf.d/default.conf
server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    listen       80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    server_name  _&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#access_log  /var/log/nginx/host.access.log  main;&lt;/span&gt;

    location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        proxy_set_header   X-Forwarded-For &lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        proxy_set_header   Host &lt;span class=&quot;nv&quot;&gt;$http_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        proxy_pass         &lt;span class=&quot;s2&quot;&gt;&quot;http://127.0.0.1:8080&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#error_page  404              /404.html;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# redirect server error pages to the static page /50x.html&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    error_page   500 502 503 504  /50x.html&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    location &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /50x.html &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        root   /usr/share/nginx/html&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# proxy the PHP scripts to Apache listening on 127.0.0.1:80&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#location ~ \.php$ {&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    proxy_pass   http://127.0.0.1;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#location ~ \.php$ {&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    root           html;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    fastcgi_pass   127.0.0.1:9000;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    fastcgi_index  index.php;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    include        fastcgi_params;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# deny access to .htaccess files, if Apache's document root&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# concurs with nginx's one&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#location ~ /\.ht {&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    deny  all;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the proxy prefixed lines are the changes to be made.&lt;/p&gt;

&lt;h1 id=&quot;step---5---get-a-domain-name-and-configure-dns&quot;&gt;STEP - 5 - Get a domain name and configure DNS&lt;/h1&gt;

&lt;p&gt;I personally signed up the &lt;a href=&quot;https://education.github.com/pack&quot;&gt;Github Student Developer&lt;/a&gt; pack a few years ago and got &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kaushik.me&lt;/code&gt; for free, along with several other benefits. I highly recommend that.&lt;/p&gt;

&lt;p&gt;Regardless, a domain will let you set up virtual hosts and is easier to access than the long default ec2 url. So once you have the domain you can configure DNS.&lt;/p&gt;

&lt;p&gt;My DNS config looks like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20220122145627986.png&quot; alt=&quot;image-20220122145627986&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Simply CNAME all your vhosts to your EC2 url.&lt;/p&gt;

&lt;p&gt;And voila, http://musings.kaushik.me will now be a valid url redirecting to my blog. And at this point you can now test your Pi’s NGINX config with vhosts.&lt;/p&gt;

&lt;p&gt;NOTE: I have added the autossh command to my bashrc, so if the pi is ever rebooted, i simply need to ssh for the tunneling to be  reinitiated. And with nohup the tunnel will persist even after logout.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; pgrep &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;autossh&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null
&lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nohup&lt;/span&gt; /usr/lib/autossh/autossh &lt;span class=&quot;nt&quot;&gt;-M&lt;/span&gt; 0 &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 8080:localhost:80 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;StrictHostKeyChecking no&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ServerAliveInterval 30&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; something/something/myrsa.pem ec2-user@kaushik.me &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/home/pi/logs/site.out 2&amp;gt;/home/pi/logs/siteerr.out &amp;amp;
        &lt;span class=&quot;nb&quot;&gt;nohup&lt;/span&gt; /usr/lib/autossh/autossh &lt;span class=&quot;nt&quot;&gt;-M&lt;/span&gt; 0 &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 2222:localhost:22 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;StrictHostKeyChecking no&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; something/something/myrsa.pem ec2-user@kaushik.me &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/home/pi/logs/ssh.out 2&amp;gt;/home/pi/logs/ssherr.out &amp;amp;

&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this setup the ssh is also forwarded so now I can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh pi@kaushik.me -p 2222&lt;/code&gt; to ssh into my pi from anywhere in the world. (Dont try this since I have changed the password.)&lt;/p&gt;

&lt;p&gt;That’s it! If you made it this far, Congratulations! you can now reap the benefits of your very own web infrastructure and make it do whatever you want, for free!&lt;/p&gt;

</description>
        <pubDate>Sat, 22 Jan 2022 00:00:00 +0530</pubDate>
        <link>/networking/2022/01/22/self-hosting-for-dummies.html</link>
        <guid isPermaLink="true">/networking/2022/01/22/self-hosting-for-dummies.html</guid>
        
        
        <category>Networking</category>
        
      </item>
    
      <item>
        <title>GSoC '21 Report</title>
        <description>&lt;p&gt;Submitted report is &lt;a href=&quot;https://gist.github.com/k4u5h1k/f01d8d277e223d39dfca9c1fee3b829c&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;project-owasp-maryam&quot;&gt;Project: OWASP Maryam&lt;/h2&gt;

&lt;h2 id=&quot;proposal-dark-web-exploration-for-cyber-threat-analysis-and-expansion-of-data-sources&quot;&gt;Proposal: Dark Web Exploration (for Cyber Threat Analysis) And Expansion of Data Sources&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;milestones-achieved&quot;&gt;Milestones Achieved&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Designed and implemented a &lt;strong&gt;text document clustering module&lt;/strong&gt; using TFIDF, KMeans and FP-growth (for assigning titles to clusters). (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/commit/6f3fa6ac1ae965dcb1a3ea13996f0ca576a4c4a2&quot;&gt;Commit&lt;/a&gt;) (&lt;a href=&quot;https://github.com/k4u5h1k/Doclustering&quot;&gt;Personal repo link&lt;/a&gt;)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Generate text data using,&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./maryam.py -e google -q 'Marvel' -l 10 --api --format &amp;gt; test.json&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Pass it to cluster module with,&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./maryam.py -e cluster --json test.json&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/yB48znAlJbm1dqg.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.49.58 PM&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/4UYNB2oLEyXCH5b.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.50.48 PM&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/8hB1H6CoGxEweuP.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.51.08 PM&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/cDrgm1nN9354dXM.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.51.23 PM&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/fXH8nac1eJjmVBS.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.51.43 PM&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Designed and implemented a &lt;strong&gt;smart dark web crawler module&lt;/strong&gt;, using a custom TFIDF text retriever class using cosine similarity to rank best pages to crawl per Snowball Sampling iteration. (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/commit/ee12cadb82a8dc9984217d1f5b8c082f54377897&quot;&gt;Commit&lt;/a&gt;) (Note: explicit results not shown unless searched for)&lt;/p&gt;

    &lt;p&gt;In progress:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/cwAM84l6opqk7Ov.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.55.42 PM&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Results after reaching target depth:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/4LxusaRzfMbF9Vk.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.58.04 PM&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Implemented various search modules&lt;/strong&gt; over diverse sources, namely,&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Phone Number Search&lt;/strong&gt; using NumVerify (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/pull/141&quot;&gt;PR&lt;/a&gt;).&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/eJMigsTxXUAN4fH.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.16.23 PM&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Dictionary&lt;/strong&gt; module using Google Dictionary (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/pull/215&quot;&gt;PR&lt;/a&gt;).&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/Vgly24fUj6sGALz.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.14.48 PM&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;SanctionSearch&lt;/strong&gt; (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/pull/153&quot;&gt;PR&lt;/a&gt;)&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/cqlpykQ61W2AIKB.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.16.02 PM&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Gigablast&lt;/strong&gt; (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/pull/143&quot;&gt;PR&lt;/a&gt;)&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/q5mJPRXf4TdU1Su.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.17.08 PM&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Reddit&lt;/strong&gt; Search (without official API or scraping) (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/commit/c216f9fd8c701e9b7f955ecab9b85cb0a35a265b&quot;&gt;Commit&lt;/a&gt;).&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/TGz8VqP1m5nxgRY.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.18.26 PM&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Twitter &lt;strong&gt;Tweet Search&lt;/strong&gt; (without official API or scraping) w/ Sentiment Analysis (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/commit/d140cc7661cd0ac34edea8fcb24e6cc80786a82f&quot;&gt;Commit&lt;/a&gt;).&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/NV7lUpSZmDawndP.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.20.22 PM&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/o9kmeO75TQj4v3h.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.20.52 PM&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;ActiveSearchResults&lt;/strong&gt; (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/pull/133&quot;&gt;PR&lt;/a&gt;)&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/MkwbWTxHyGsova2.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.21.13 PM&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;PirateBay&lt;/strong&gt; (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/pull/117&quot;&gt;PR&lt;/a&gt;) (Later &lt;a href=&quot;https://github.com/saeeddhqan/Maryam/commit/6d1f57e08248502968f5212fe5bfdef21572d8ef&quot;&gt;updated&lt;/a&gt; to use undocumented backend API)&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/6WtSmcPRwa2inr7.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.21.55 PM&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Google Scholar&lt;/strong&gt; (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/pull/236&quot;&gt;PR&lt;/a&gt;)&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/omkVBeMxSdfYIUg.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.22.45 PM&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;ArXiv&lt;/strong&gt; (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/pull/116&quot;&gt;PR&lt;/a&gt;)&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/hy4L1ed8KzuqfHv.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.23.27 PM&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;PubMed&lt;/strong&gt; (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/pull/120&quot;&gt;PR&lt;/a&gt;)&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/v8m9GMIAJeqy2hi.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.25.07 PM&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Core.ac.uk Search&lt;/strong&gt; (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/pull/241&quot;&gt;PR&lt;/a&gt;)&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/J53ptdNGXx6ZvMF.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.26.27 PM&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Famous Person Search&lt;/strong&gt; (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/commit/4eb8e42b63ddb9044a13ce6e38bc22a3957a77a5&quot;&gt;Commit&lt;/a&gt;)&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/MqWcs2yRrvm6Tb5.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.28.36 PM&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Article Search&lt;/strong&gt; (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/commit/1a270ef3a7dcbe4392d857117d7537889e31143b&quot;&gt;Commit&lt;/a&gt;)&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/Ydy3bA1jkBs8pne.png&quot; alt=&quot;Screenshot 2021-08-17 at 12.29.30 PM&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;And &lt;strong&gt;standalone utility classes&lt;/strong&gt;, namely,&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Web Page Term Frequency Histogram&lt;/strong&gt; class. (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/commit/ef9d7477c2ffed4b0aeeddbdb1e84bc2fd5f4512#diff-43d43736de37488c6d4a0bd64733d58754c69a4a97d0b03b37e1951fcb0e84c6&quot;&gt;Commit&lt;/a&gt; (Brought to Maryam from an extension repo which is now deleted to reduce clutter))&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/9UOHRswtXjoeTVf.png&quot; alt=&quot;Jen&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;Image taken from famous person module output for Jennifer Aniston.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Safe Search&lt;/strong&gt; Class (manages captcha and evades engine specific errors using rotation). (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/commit/9587ef7b3fe8c5dfc785366e43d17f87dd4a0e40&quot;&gt;Commit&lt;/a&gt; (previously named CaptchaManager))&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Discovered startup lag&lt;/strong&gt; due to heavy imports such as matplotlib and implemented  optimization with cleanup resulting in significant reduction in startup time. (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/commit/45e35af1686702336cb897f0563d15b39df244ef&quot;&gt;Commit 1&lt;/a&gt;, &lt;a href=&quot;https://github.com/saeeddhqan/Maryam/commit/2ca24ee4b8920e1c9758d6aeb79ad5a5cb090e83&quot;&gt;Commit 2&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Restructured and cleaned up Maryam’s file tree&lt;/strong&gt; in order to make it suitable for packaging and distribution. (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/pull/233&quot;&gt;PR&lt;/a&gt; (closed but later rechecked and &lt;a href=&quot;https://github.com/saeeddhqan/Maryam/commit/438e72ede11bc707fccafa02bc44e731aebe4d0c&quot;&gt;commited&lt;/a&gt; manually by mentor saeeddhqan))&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Packaged and deployed&lt;/strong&gt; &lt;strong&gt;Maryam&lt;/strong&gt; to PyPi. (&lt;a href=&quot;https://pypi.org/project/maryam/&quot;&gt;link&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fixed critical bug affecting OSX on Python3.8 and 3.9. (&lt;a href=&quot;https://github.com/saeeddhqan/Maryam/issues/246&quot;&gt;Issue&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Made &lt;strong&gt;numerous bug fixes&lt;/strong&gt;, all of which can be accessed from the list of my &lt;a href=&quot;https://github.com/saeeddhqan/Maryam/commits?author=k4u5h1k&quot;&gt;commits&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;to-continue-my-work&quot;&gt;To Continue My Work&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Implement &lt;strong&gt;frontend for Web API&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;A way to test module utils (at least engines) without module_api or module_run.&lt;/li&gt;
  &lt;li&gt;Iris is key. The ultimate goal of Maryam is to &lt;strong&gt;improve Iris to the extent at which it can smartly leverage collaboratively, the capabilities of all modules&lt;/strong&gt; and present its output intuitively.
    &lt;ul&gt;
      &lt;li&gt;This requires us to classify an input query into the module that (we think) can handle it best.&lt;/li&gt;
      &lt;li&gt;Output could be formatted as accordion of most suitable module outputs.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 19 Aug 2021 00:00:00 +0530</pubDate>
        <link>/programming/2021/08/19/gsoc-'21-report.html</link>
        <guid isPermaLink="true">/programming/2021/08/19/gsoc-'21-report.html</guid>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Tmux Shortcuts</title>
        <description>&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tmux&lt;/code&gt; is a session manager for your terminal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/EKWjP6H.jpg&quot; alt=&quot;terminal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl-b&lt;/code&gt;     ← prefix&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix %&lt;/code&gt; ← split with vertical line&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix &quot;&lt;/code&gt; ← split with horizontal line&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix x&lt;/code&gt; ← kill pane&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix c&lt;/code&gt; ← new window&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix p&lt;/code&gt; ← move to previous window&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix n&lt;/code&gt; ← move to next window&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix d&lt;/code&gt; ← detach&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix z&lt;/code&gt; ← toggle pane full screen&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix q&lt;/code&gt; ← show pane numbers; type number to go to pane&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix ,&lt;/code&gt; ← rename window&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix $&lt;/code&gt; ← rename session&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix s&lt;/code&gt; ← list session&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix ' #&lt;/code&gt; ← jump to # window&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix f&lt;/code&gt; ← jump to window by name&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix !&lt;/code&gt; ← send pane to new window&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix &amp;amp;&lt;/code&gt; ← kill window&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix t&lt;/code&gt; ← big clock&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix o&lt;/code&gt; ← swap panes&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix {&lt;/code&gt; ← move current pane left&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix }&lt;/code&gt; ← move current pane right&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:setw synchronize-panes on&lt;/code&gt; ← sync panes&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Jun 2021 00:00:00 +0530</pubDate>
        <link>/terminal/2021/06/02/tmux-notes.html</link>
        <guid isPermaLink="true">/terminal/2021/06/02/tmux-notes.html</guid>
        
        
        <category>Terminal</category>
        
      </item>
    
      <item>
        <title>On Ctrl-C Ctrl-V</title>
        <description>&lt;p&gt;Javascript is extremely powerful, to say the least. One of its often overlooked features is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy&lt;/code&gt; event listener.&lt;/p&gt;

&lt;p&gt;What damage can that do? Here, copy this ‘innocent’ command (&lt;em&gt;meant to be pasted into a shell&lt;/em&gt;) and paste it somewhere.&lt;/p&gt;

&lt;p id=&quot;fakecopy&quot;&gt;&lt;code&gt;$ echo &quot;innocent text&quot;&lt;/code&gt;&lt;/p&gt;

&lt;script&gt;
 document.getElementById('fakecopy').addEventListener('copy', function(e) {
    e.clipboardData.setData('text/plain',
        'echo &quot;This could\'ve be something malicious!😈&quot;\n');
    e.preventDefault();
});
&lt;/script&gt;

&lt;p&gt;The text you just copied even has an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enter&lt;/code&gt; character, so the command will execute automatically if pasted in a shell, and &lt;strong&gt;I will have control over this system before you can even comprehend what happened&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is how the code works,&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;fakecopy&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clipboardData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;text/plain&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;echo &quot;This could&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ve be something malicious!😈&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Think you’ll be safe by disabling Javascript? Sorry to burst your bubble but this can also be done with raw CSS.&lt;/p&gt;

&lt;p id=&quot;fakecopy&quot;&gt; &lt;code&gt;$ echo &lt;span style=&quot;font-size: 0;&quot;&gt;; rm -rf / ; echo &lt;/span&gt;&quot;looks safe to me!&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is how that works,&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;font-size: 0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'malicious command'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;looks safe to me!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 01 Jun 2021 17:00:00 +0530</pubDate>
        <link>/hacking/2021/06/01/on-Copy-Paste.html</link>
        <guid isPermaLink="true">/hacking/2021/06/01/on-Copy-Paste.html</guid>
        
        
        <category>Hacking</category>
        
      </item>
    
      <item>
        <title>ROS for Dummies</title>
        <description>&lt;p&gt;This is the transcript of my seminar on ROS for Dummies, for Dreadnought.&lt;/p&gt;

&lt;h3 id=&quot;what-ros-is-not&quot;&gt;WHAT ROS IS NOT&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Operating system.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Complicated.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-you-need-to-understand-this-post&quot;&gt;WHAT YOU NEED TO UNDERSTAND THIS POST&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Basic understanding of Python.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Basic linux terminal usage.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-ros-and-why-should-i-use-it&quot;&gt;WHAT IS ROS AND WHY SHOULD I USE IT?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;At its core it is simply a middleman between software written using ROS tools, and your operating system, similar to Docker.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It provides tons of features for controlling very low level hardware with
few lines of a popular language, data visualization, simple data transfer between all your components and a helluva lot more.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;People all over the world have already written tons of packages to do all sorts of stuff with every obscure component imaginable, and the majority of that software is open source!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-will-this-post-teach-me&quot;&gt;WHAT WILL THIS POST TEACH ME?&lt;/h2&gt;

&lt;p&gt;You will be able to use python to write basic ROS pubsub programs, or at the very least you’ll understand how ROS works. Hopefully you don’t understand it well enough to figure out that I only need one-fifth of my proposed project deadline to finish said project.&lt;/p&gt;

&lt;p&gt;However, sadly I will not dig into the GUI elements like Gazebo and rqt because that is more elaborate and requires a lot more time to teach properly. Perhaps another time.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;INTRODUCTION&lt;/h2&gt;

&lt;p&gt;A robotic system running on ROS software is made up of several &lt;strong&gt;nodes&lt;/strong&gt;. Each node is responsible for exactly &lt;strong&gt;one&lt;/strong&gt; purpose, like controlling the speed, or the steering wheel or a camera. Nodes can talk to each other and function as one entity through &lt;strong&gt;pubsub&lt;/strong&gt;, &lt;strong&gt;services&lt;/strong&gt;, &lt;strong&gt;actions&lt;/strong&gt; or &lt;strong&gt;parameters&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;you-just-bombarded-me-with-big-words-what-do-they-mean&quot;&gt;You just bombarded me with big words, what do they mean?&lt;/h3&gt;

&lt;p&gt;When you subscribe to a magazine on some topic, the publisher periodically sends you the exact magazine you subscribed for. However you as a subscriber cannot send anything to the publisher. This is exactly what happens between nodes. node 1 can subscribe to node 2 on a particular topic, which means that node 1 can listen to node 2 talk about that particular topic. Nodes are free to publish or subscribe to as many other nodes as they want but the communication along a single connection is always one way. A service is not much different except now the communication is two way kind of like a client-server interface and the server provides whatever data the client requests.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Nodes-TopicandService.gif&quot; alt=&quot;Nodes-TopicandService&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An action is same as a service but it is not blocking, which means that the client can do whatever it wants while it waits for a response from the action server. Parameters are global variables that all nodes can access (and very rarely modify).&lt;/p&gt;

&lt;h2 id=&quot;enough-theory-lets-jump-in&quot;&gt;ENOUGH THEORY, LETS JUMP IN&lt;/h2&gt;

&lt;p&gt;The rclpy library, contains everything you need to write and run elegant systems in ROS. To start with, lets make a node that does nothing, just to become familiar with the syntax. Then we will move on to two nodes, one that publishes magazine issues periodically and another that subscribes to the publisher and recieves the issues as they are sent out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First load up your ROS environment variables by sourcing the setup&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik ros2-osx % &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;setup.zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;simple-node&quot;&gt;SIMPLE NODE&lt;/h3&gt;

&lt;h4 id=&quot;execution&quot;&gt;Execution&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik tutorial % python3.8 first_node.py
just sits pretty &lt;span class=&quot;k&quot;&gt;until &lt;/span&gt;i hit Control-C
^C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;code&quot;&gt;Code&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy.node&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'my_first_node'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let us dissect this,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy.node&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Self explanatory, first we import the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rclpy&lt;/code&gt; library and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node&lt;/code&gt; class,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'my_first_node'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We initiate the library and then instantiate our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node&lt;/code&gt;,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we just instantiate our node and dont put this line the program execution will stop there. If we want to keep our node running until we kill it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Control-C&lt;/code&gt; or otherwise, this must be used.&lt;/p&gt;

&lt;p&gt;Congratulations you just learnt to write a node! Lets move on to something more advanced.&lt;/p&gt;

&lt;p&gt;Now we will write a two nodes that send magazine issues using pubsub!
The publisher will send magazine issues as a string and the subscriber will recieve them in realtime.&lt;/p&gt;

&lt;h3 id=&quot;publisher&quot;&gt;PUBLISHER&lt;/h3&gt;

&lt;h4 id=&quot;execution-1&quot;&gt;Execution&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik first_pubsub % python3.8 publisher.py
Sending: issue number 1
Sending: issue number 2
Sending: issue number 3
Sending: issue number 4
Sending: issue number 5
Sending: issue number 6
^C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;code-1&quot;&gt;Code&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy.node&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std_msgs.msg&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MagazinePublisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'magazine_publisher'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playboy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;s&quot;&gt;'fashion'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timer_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'issue number '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playboy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Sending: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;magazine_publisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MagazinePublisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magazine_publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Commencing surgery,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpyfrom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Node&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std_msgs.msg&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Apart from our usual imports there is a new one. In this project we are not only creating a node but also sending stuff which needs to be in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; class (not to be confused with the string data type). The actual message goes in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String.data&lt;/code&gt;,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MagazinePublisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;    
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;        
    &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'magazine_publisher'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playboy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                 
                                         &lt;span class=&quot;s&quot;&gt;'fashion'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                
                                         &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we declare our publisher class that declares itself as a Node by the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magazine_publisher&lt;/code&gt;, and publishing on the topic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fashion&lt;/code&gt;  &lt;del&gt;Didn’t know what else to call playboy sorry&lt;/del&gt; with a buffer size of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timer&lt;/code&gt; that calls our sender function every 1 second.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timer_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'issue number '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playboy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Sending: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This function gets called by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timer&lt;/code&gt; every second. It uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playboy&lt;/code&gt; object to send magazine issues as messages.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;magazine_publisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MagazinePublisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magazine_publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Like the first node we initiate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rclpy&lt;/code&gt; then instantiate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MagazinePublisher&lt;/code&gt; and spin it.&lt;/p&gt;

&lt;h3 id=&quot;subscriber&quot;&gt;SUBSCRIBER&lt;/h3&gt;

&lt;h4 id=&quot;execution-2&quot;&gt;Execution&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik first_pubsub % python3.8 subscriber.py
Recieved issue number 1
Recieved issue number 2
Recieved issue number 3
Recieved issue number 4
Recieved issue number 5
Recieved issue number 6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;code-2&quot;&gt;Code&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy.node&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std_msgs.msg&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MagazineSubscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'magazine_subscriber'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'fashion'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listener_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Recieved '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;magazine_subscriber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MagazineSubscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magazine_subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscriber&lt;/code&gt; only recieves the message and prints it out so its relatively simple.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy.node&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std_msgs.msg&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Familiar imports.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MagazineSubscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'magazine_subscriber'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'fashion'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Making a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscriber&lt;/code&gt; class and instantiating its parent with the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magazine_subscriber&lt;/code&gt; . We then create a subription to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fashion&lt;/code&gt; topic to recieve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; data, with a buffer time of 10 (&lt;em&gt;doesn’t matter as long as the callback function does not take too long to execute&lt;/em&gt;). And whenever a message is recieved &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;listener_callback&lt;/code&gt; function is called.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listener_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Recieved '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;listener_callback&lt;/code&gt; function we simply print the recieved message. meh&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;magazine_subscriber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MagazineSubscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magazine_subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Familiar routine to run once and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spin&lt;/code&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscriber&lt;/code&gt; forever.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOW CAN THIS BE USED TO CONTROL AN RC CAR?&lt;/strong&gt;  &lt;sup&gt; yep &lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;packages&quot;&gt;PACKAGES&lt;/h2&gt;

&lt;p&gt;The actual beauty of ROS lies in its package system. Upto this point we were using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3.8&lt;/code&gt; to run our scripts but basically any ROS software can be converted into sort of an executable package which can then be directly run without even mentioning the language.&lt;/p&gt;

&lt;p&gt;Ideally you would start writing your code inside an empty project and once done just run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;colcon build&lt;/code&gt; in the project root and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source project_root/install/setup.zsh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lets try converting our magazine pubsub to a package,&lt;/p&gt;

&lt;h3 id=&quot;creating-and-running-a-package&quot;&gt;CREATING AND RUNNING A PACKAGE&lt;/h3&gt;

&lt;h4 id=&quot;step-1&quot;&gt;STEP-1:&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catkin_ws/src&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik ros2-osx % &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;catkin_ws/src
Kaushik src % &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/Users/Kaushik/ros2_foxy/ros2-osx/catkin_ws/src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create an empty package using the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ros2 pkg create --build-type ament_python magazine&lt;/code&gt; . You should now see a new magazine directory. This is called the &lt;strong&gt;project root&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik src % ros2 pkg create &lt;span class=&quot;nt&quot;&gt;--build-type&lt;/span&gt; ament_python magazine
going to create a new package
package name: magazine
destination directory: /Users/Kaushik/ros2_foxy/ros2-osx/catkin_ws/src
package format: 3
version: 0.0.0
description: TODO: Package description
maintainer: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Kaushik &amp;lt;kaushik.sivashankar@gmail.com&amp;gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
licenses: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'TODO: License declaration'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
build &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: ament_python
dependencies: &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
creating folder ./magazine
creating ./magazine/package.xml
creating &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;folder
creating folder ./magazine/magazine
creating ./magazine/setup.py
creating ./magazine/setup.cfg
creating folder ./magazine/resource
creating ./magazine/resource/magazine
creating ./magazine/magazine/__init__.py
creating folder ./magazine/test
creating ./magazine/test/test_copyright.py
creating ./magazine/test/test_flake8.py
creating ./magazine/test/test_pep257.py
Kaushik src % &lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;examples        magazine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magazine&lt;/code&gt; has a structure like,&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik src % tree magazine
magazine
├── magazine
│   └── __init__.py
├── package.xml
├── resource
│   └── magazine
├── setup.cfg
├── setup.py
└── &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
    ├── test_copyright.py
    ├── test_flake8.py
    └── test_pep257.py

3 directories, 8 files

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;step-2&quot;&gt;STEP-2:&lt;/h4&gt;

&lt;p&gt;Awesome now lets move our publisher and subscriber scripts into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magazine/magazine&lt;/code&gt;. All of your nodes need to be in this &lt;package_name&gt;/&lt;package_name&gt; script. ezpz&lt;/package_name&gt;&lt;/package_name&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik magazine % &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;magazine
Kaushik magazine % &lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; ../../../../../tutorial/first_pubsub/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Kaushik magazine % &lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;__init__.py     publisher.py    subscriber.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;step-3&quot;&gt;STEP-3:&lt;/h4&gt;

&lt;p&gt;Now we must register the two scripts to be built into executables in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.py&lt;/code&gt; of the project’s root.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;entry_points&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;'console_scripts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;'publisher = magazine.publisher:main'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;'subscriber = magazine.subscriber:main'&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And lastly,&lt;/p&gt;

&lt;h4 id=&quot;step-4&quot;&gt;STEP-4:&lt;/h4&gt;

&lt;p&gt;We must tell the ament build system that we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rclpy&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std_msgs&lt;/code&gt; as dependencies that also need to be built into executables.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ament_python&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_depend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_depend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_depend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std_msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_depend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;step-5&quot;&gt;STEP-5:&lt;/h4&gt;

&lt;p&gt;Awesome! Lets build it up! Simply navigate back to project root and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;colcon build&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik magazine % &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/Users/Kaushik/ros2_foxy/ros2-osx/catkin_ws/src/magazine
Kaushik magazine % colcon build
Starting &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; magazine
Finished &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; magazine &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2.17s]

Summary: 1 package finished &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;3.21s]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yay! We built the package! You should now see a new install folder in project root. Now simply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source install/setup.zsh&lt;/code&gt; to add our new executable to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt;. Now we can run it using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ros2 run &amp;lt;package_name&amp;gt; &amp;lt;node_name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik magazine % &lt;span class=&quot;nb&quot;&gt;source install&lt;/span&gt;/setup.zsh
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;connext_cmake_module] Warning: The location at which Connext was found when the workspace was built &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;/Applications/rti_connext_dds-5.3.1]] does not point to a valid directory, and the NDDSHOME environment variable has not been set. Support &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Connext will not be available.

Kaushik magazine % ros2 run magazine publisher
Sending: issue number 1
Sending: issue number 2
Sending: issue number 3
Sending: issue number 4
^C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lets quickly recap what we just did.&lt;/p&gt;

&lt;p&gt;I really wanted to include services and rqt and gazibo but that has tons of stuff, requires more time and a slight learning curve only makes it more foreign and boring to audience that isnt 100% interested. Maybe I can cover that in a separate session.&lt;/p&gt;

</description>
        <pubDate>Tue, 01 Jun 2021 00:00:00 +0530</pubDate>
        <link>/programming/2021/06/01/ros-for-dummies.html</link>
        <guid isPermaLink="true">/programming/2021/06/01/ros-for-dummies.html</guid>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Github For Dummies</title>
        <description>&lt;p&gt;This is the transcript of my seminar on Github for Dummies.&lt;/p&gt;

&lt;p&gt;Git was created in 1995 by Linus Torvalds, the creator of Linux, when he was frustrated by existing version control systems. But what exactly is a &lt;em&gt;version control system&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Suppose you are working on a huge software project, and at some point, after making several changes you run the program and it just crashes. You had closed all your editors before so you can’t hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Control-Z&lt;/code&gt; and simply undo your changes. What do you do now?&lt;/p&gt;

&lt;p&gt;The correct answer is: &lt;em&gt;run it again and again until it works&lt;/em&gt;. To avoid a situation like this, you should use git. With git you can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; your changes which means you can create a checkpoint  , which can be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reset&lt;/code&gt; to later, if the need arises. Lets see how this is done.&lt;/p&gt;

&lt;p&gt;Open up your git-bash or any shell that has git installed. Now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; into the directory where you want to initialize your git repository and hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt;. If you see something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Initialized empty Git repository in path&lt;/code&gt;, this was successful. Now this git repository will track any changes you tell it to &lt;strong&gt;within&lt;/strong&gt; this directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-14 at 12.37.46 PM.png&quot; alt=&quot;Screenshot 2021-05-14 at 12.37.46 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets write a script that shows us the current time.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'%H:%m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great now lets make a commit by first adding it to the stage using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt; and then commit your stage using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-14 at 12.55.47 PM.png&quot; alt=&quot;Screenshot 2021-05-14 at 12.55.47 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Great. You’ve made your first commit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot%202021-05-14%20at%2012.57.04%20PM.png&quot; alt=&quot;Screenshot 2021-05-14 at 12.57.04 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AHHHHHHHHH I deliberately deleted my script using rm. The shell has nothing like Recycle Bin, OH NO What do I do now?!&lt;/p&gt;

&lt;p&gt;Your commits are identified by their &lt;em&gt;hashes&lt;/em&gt;. To grab this previous commit’s hash hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-14 at 12.59.44 PM.png&quot; alt=&quot;Screenshot 2021-05-14 at 12.59.44 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So my commit’s hash is  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cfe234cd49925d39a9d5a3895a7e3298e741f116&lt;/code&gt;. Yours will differ.&lt;/p&gt;

&lt;p&gt;Now you can reset to this commit using&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset --hard cfe234cd49925d39a9d5a3895a7e3298e741f116&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Awesome we have our show_time back.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-14 at 1.11.13 PM.png&quot; alt=&quot;Screenshot 2021-05-14 at 1.11.13 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now what if you made a commit you didn’t mean to make? How would you delete this commit without hard resetting to it? Simple. You &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;soft&lt;/code&gt; reset.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-14 at 1.15.06 PM.png&quot; alt=&quot;Screenshot 2021-05-14 at 1.15.06 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So now run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; to grab the hash of the commit you want to soft reset to.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-14 at 1.15.36 PM.png&quot; alt=&quot;Screenshot 2021-05-14 at 1.15.36 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So once more we want to soft reset to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;added show_time&lt;/code&gt; commit. So simply run&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset --soft cfe234cd49925d39a9d5a3895a7e3298e741f116&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Running git log again can verify that we have deleted that commit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-14 at 1.18.36 PM.png&quot; alt=&quot;Screenshot 2021-05-14 at 1.18.36 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets move to Github!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-15 at 11.48.58 AM.png&quot; alt=&quot;Screenshot 2021-05-15 at 11.48.58 AM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First off, if you don’t have dark mode on, quickly click the button on google meet that looks like a red sideways telephone.&lt;/p&gt;

&lt;p&gt;Otherwise we can proceed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloning&lt;/code&gt; someone’s repo! First copy the repo url.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-15 at 12.21.54 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.21.54 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;then hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone https://github.com/k4u5h1k/Games.git&lt;/code&gt; to clone the repo within the current directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-15 at 12.27.31 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.27.31 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets each make a github repo of our own and clone them. To make a repo hit the plus on the top right and click on new repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-15 at 12.33.24 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.33.24 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fill in the details and hit Create repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-15 at 12.37.49 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.37.49 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You have created your first repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-15 at 12.38.18 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.38.18 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looks good. Lets clone this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-15 at 12.40.15 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.40.15 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now move your show_time script into our cloned directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-15 at 12.40.38 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.40.38 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now make a commit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-15 at 12.43.19 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.43.19 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And push it to github using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-15 at 12.43.54 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.43.54 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can refresh your github repo page and show_time.py should appear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-15 at 12.47.13 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.47.13 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now what if we want to work with someone else’s repository. To do this we have two options.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Simply clone their repo locally and use their code however you want.&lt;/p&gt;

    &lt;p&gt;But in this option you will not be able to push to github because you are not allowed to push to their repo.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a fork&lt;/p&gt;

    &lt;p&gt;forking a repo means creating a copy of the original repo in your account. This will allow you to make changes to the code and push it to your fork without affecting the original repository.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To fork a repo you can click on the fork button on the top right&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-15 at 1.08.36 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 1.08.36 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now create a fork of the DNT apis repo. Go to https://github.com/dreadnoughtrobotics/DNT-apis and hit fork.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-15 at 1.10.27 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 1.10.27 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This should create a fork of the original repo in your account. You can now clone this repo and make whatever changes you want.&lt;/p&gt;

&lt;p&gt;But what if you have made a change or wrote a new feature that you think will benefit our origin repo? You make a &lt;strong&gt;Pull Request&lt;/strong&gt; (PR).&lt;/p&gt;

&lt;p&gt;Once you make your PR the maintainers will review it, or suggest changes if required. Finally they may merge your PR or close it without merging, if they found your addition inappropriate or inadequate.&lt;/p&gt;

&lt;p&gt;Now if someone makes a PR to your project and you accept their changes, how will you apply their changes to your local code? Will you clone the repo again? No. You use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lets make a change to our screen_time repo’s README and pull the change locally.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-15 at 5.18.10 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 5.18.10 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the pen icon here and make changes to the README.&lt;/p&gt;

&lt;p&gt;Then go to your screen_time directory and type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; to get those changes in your local README.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2021-05-15 at 5.45.46 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 5.45.46 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You are now equipped with the power of git!&lt;/p&gt;
</description>
        <pubDate>Sun, 30 May 2021 17:06:13 +0530</pubDate>
        <link>/programming/2021/05/30/github-for-dummies.html</link>
        <guid isPermaLink="true">/programming/2021/05/30/github-for-dummies.html</guid>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Python For Dummies</title>
        <description>&lt;p&gt;This is the transcript of my seminar on a Crash Course for Python3, for AUVSI.&lt;/p&gt;

&lt;h2 id=&quot;why-python&quot;&gt;Why Python?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;It is very &lt;strong&gt;easy to learn&lt;/strong&gt; and &lt;strong&gt;elegant to look at&lt;/strong&gt;, even if your code is not perfect.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No curly brackets&lt;/strong&gt; &lt;strong&gt;or semicolon&lt;/strong&gt; bull.&lt;/li&gt;
  &lt;li&gt;It has the &lt;strong&gt;biggest programming community&lt;/strong&gt; by far. This means anything you want to build is already available open source, and the numerous libraries allow you to &lt;strong&gt;make whatever you can dream of&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;For the above reasons, competent Python programmers are in great demand right now. So &lt;strong&gt;MONEEEYYYYY&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://codingnomads.co/wp-content/uploads/2019/06/PythonSalaryDaxx2019.png&quot; alt=&quot;learn Python, python programming, python bootcamp, what is Python used for&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;will-this-talk-get-me-100k&quot;&gt;Will This Talk Get Me $100k?&lt;/h3&gt;

&lt;p&gt;Well, probably not. But after the next 45 minutes, you will be able to read and write Python quite well and maybe do some data juggling with numpy and pandas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you stick around until the end, I have something in store that will blow your mind.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The flow will tentatively go as follows,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Intro to interpreter&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hello World&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Variables And Types&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Operators&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lists&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Loops&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Conditions (if else)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Imports&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Numpy Introduction&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Pandas Introduction&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ve been told that there will be a separate session for numpy and pandas so we will not go too deep into that in this talk.&lt;/p&gt;

&lt;p&gt;At the end of some sections, you will be given a problem to solve. We will not proceed until and unless everyone successfully solves it.&lt;/p&gt;

&lt;h2 id=&quot;intro-to-the-interpreter&quot;&gt;Intro To The Interpreter&lt;/h2&gt;

&lt;p&gt;When you open up IDLE or type python3 in your terminal, you should see something that looks like the following if your python is properly installed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IDLE&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2020-11-18 at 2.02.23 PM.png&quot; alt=&quot;Screenshot 2020-11-18 at 1.40.55 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TERMINAL&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2020-11-18 at 1.41.46 PM.png&quot; alt=&quot;Screenshot 2020-11-18 at 1.41.46 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is called the interpreter. Interpreters execute code line by line.&lt;/p&gt;

&lt;h2 id=&quot;hello-world&quot;&gt;HELLO WORLD&lt;/h2&gt;

&lt;p&gt;Simply open up your interpreter and write&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And press enter. You should see it printed on the next line.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2020-11-18 at 1.43.39 PM.png&quot; alt=&quot;Screenshot 2020-11-18 at 1.43.39 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ezpz Lets move on.&lt;/p&gt;

&lt;h2 id=&quot;variables-and-types&quot;&gt;VARIABLES AND TYPES&lt;/h2&gt;

&lt;p&gt;Python is called a statically typed language which means that you dont have to say beforehand what the data type a variable is. This makes it much more pleasing to look at.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2020-11-18 at 1.52.15 PM.png&quot; alt=&quot;Screenshot 2020-11-18 at 1.52.15 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you might ask, if data types dont exist how can I convert an integer to a decimal?&lt;/p&gt;

&lt;p&gt;You would simply use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data_type_you_want(variable_name)&lt;/code&gt; syntax. This is called &lt;strong&gt;typecasting&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2020-11-18 at 2.00.20 PM.png&quot; alt=&quot;Screenshot 2020-11-18 at 2.00.20 PM&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;operators&quot;&gt;OPERATORS&lt;/h2&gt;

&lt;p&gt;The usual &lt;strong&gt;addition (+)&lt;/strong&gt;, &lt;strong&gt;subtraction (-)&lt;/strong&gt;, &lt;strong&gt;multiplication (*)&lt;/strong&gt; and &lt;strong&gt;division (/)&lt;/strong&gt; are obviously present.&lt;/p&gt;

&lt;p&gt;But apart from that we have the &lt;strong&gt;modulo (%)&lt;/strong&gt; operator, used to find the remainder after division of two numbers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2020-11-18 at 6.33.14 PM.png&quot; alt=&quot;Screenshot 2020-11-18 at 6.33.14 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the &lt;strong&gt;power&lt;/strong&gt;(**) operator, to raise to a power.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2020-11-18 at 6.36.06 PM.png&quot; alt=&quot;Screenshot 2020-11-18 at 6.36.06 PM&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lists&quot;&gt;LISTS&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lists&lt;/code&gt; are very similar to arrays. They can contain any type of variable, and they can contain as many variables as you wish. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lists&lt;/code&gt; can also be iterated over in a very simple manner. Here is an example of how to build a list.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2020-11-18 at 3.00.12 PM.png&quot; alt=&quot;Screenshot 2020-11-18 at 3.00.12 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;List elements can be &lt;strong&gt;accessed using indexes&lt;/strong&gt; with square &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt; brackets . Lists are &lt;strong&gt;indexed from 0&lt;/strong&gt; .&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2020-11-18 at 3.03.17 PM.png&quot; alt=&quot;Screenshot 2020-11-18 at 3.03.17 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To add an element to the end of a list use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;append&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2020-11-18 at 3.14.02 PM.png&quot; alt=&quot;Screenshot 2020-11-18 at 3.14.02 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To remove an element from a list,&lt;/p&gt;

&lt;p&gt;to remove by value use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove&lt;/code&gt;,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2020-11-18 at 3.16.20 PM.png&quot; alt=&quot;Screenshot 2020-11-18 at 3.16.20 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;to remove by index use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;del&lt;/code&gt;,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2020-11-18 at 3.17.42 PM.png&quot; alt=&quot;Screenshot 2020-11-18 at 3.17.42 PM&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;loops&quot;&gt;LOOPS&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Python3 &lt;strong&gt;does not have curly brackets&lt;/strong&gt; to enclose units of code. It makes use of &lt;strong&gt;blocks&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A block is a area of code of written in the format of:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;block_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Loops can run any number of commands as many times until a specified condition is valid.&lt;/p&gt;

&lt;p&gt;In Python, there are two types of loops, for and while.&lt;/p&gt;

&lt;p&gt;for loops iterate over a sequence,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2020-11-18 at 6.05.18 PM.png&quot; alt=&quot;Screenshot 2020-11-18 at 6.05.18 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and while loops repeat as long as a certain boolean condition is valid.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2020-11-18 at 6.06.48 PM.png&quot; alt=&quot;Screenshot 2020-11-18 at 6.06.48 PM&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conditions&quot;&gt;Conditions&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/coffee.png&quot; alt=&quot;coffee&quot; /&gt;&lt;/p&gt;

&lt;p&gt;if-else statements are the pillars of programming. Its quite simple. if a condition checks out then we run some code but if not then we run something else.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2020-11-18 at 9.25.55 PM.png&quot; alt=&quot;Screenshot 2020-11-18 at 9.25.55 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also add more conditions using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;and&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;or&lt;/code&gt; operators between them. Open up your editor, lets write some conditions.&lt;/p&gt;

&lt;h2 id=&quot;functions&quot;&gt;FUNCTIONS&lt;/h2&gt;

&lt;h3 id=&quot;what-are-functions&quot;&gt;What are Functions?&lt;/h3&gt;

&lt;p&gt;Functions are a convenient way to divide your code into useful blocks, allowing us to order our code, make it more readable, reuse it and save some time. Also functions are a key way to define interfaces so programmers can share their code.&lt;/p&gt;

&lt;h3 id=&quot;how-do-you-write-functions-in-python&quot;&gt;How do you write functions in Python?&lt;/h3&gt;

&lt;p&gt;Functions in python are defined using the block keyword “def”, followed with the function’s name as the block’s name. For example:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello From My Function!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Functions may also receive arguments (variables passed from the caller to the function). For example:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_function_with_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; , From My Function!, I wish you &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Functions may return a value to the caller, using the keyword- ‘return’ . For example:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum_two_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To call a function that has been defined, simply use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function_name(arguments)&lt;/code&gt;,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_function_with_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AUVSI&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Happy Holidays&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;imports&quot;&gt;IMPORTS&lt;/h2&gt;

&lt;p&gt;Functions that are written in the same folder in different script or are installed through pip, can be imported directly into your program using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from module_name import function_name&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That gives your script access to the random function which prints a random number between 0 and 1.&lt;/p&gt;

&lt;h2 id=&quot;now-for-the-surprise&quot;&gt;NOW FOR THE SURPRISE&lt;/h2&gt;

&lt;p&gt;I was really excited to talk about this on the sesh but sadly we went way overtime :(&lt;/p&gt;

&lt;p&gt;So lets say I made a script for a function that loops over a list like so,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2020-11-18 at 9.21.05 PM.png&quot; alt=&quot;Screenshot 2020-11-18 at 9.21.05 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, remove the colon at the start of the block and add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end&lt;/code&gt; at the end of &lt;strong&gt;each block&lt;/strong&gt; and save this new script with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rb&lt;/code&gt; extension. Now let me run this with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt; interpreter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Screenshot 2020-11-18 at 9.24.18 PM.png&quot; alt=&quot;Screenshot 2020-11-18 at 9.24.18 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations, you now not only know python, but also &lt;strong&gt;ruby&lt;/strong&gt;! (which is if you recall from the top, the language with the most pay!)&lt;/p&gt;
</description>
        <pubDate>Sun, 30 May 2021 00:00:00 +0530</pubDate>
        <link>/programming/2021/05/30/python-for-dummies.html</link>
        <guid isPermaLink="true">/programming/2021/05/30/python-for-dummies.html</guid>
        
        
        <category>Programming</category>
        
      </item>
    
  </channel>
</rss>
