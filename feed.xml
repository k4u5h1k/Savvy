<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>For everything technical and interesting</description>
    <link>/savvy/</link>
    <atom:link href="/savvy/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 01 Jun 2021 20:52:12 +0530</pubDate>
    <lastBuildDate>Tue, 01 Jun 2021 20:52:12 +0530</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>ROS for dummies</title>
        <description>&lt;p&gt;Off the bat, ROS is not an operating system, or even remotely complicated.&lt;/p&gt;

&lt;h3 id=&quot;what-you-need-to-understand-this-post&quot;&gt;WHAT YOU NEED TO UNDERSTAND THIS POST&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Basic understanding of Python.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Basic linux terminal usage.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-ros-and-why-should-i-use-it&quot;&gt;WHAT IS ROS AND WHY SHOULD I USE IT?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;At its core it is simply a middleman between software written using ROS tools, and your operating system, similar to Docker.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It provides tons of features for controlling very low level hardware with
few lines of a popular language, data visualization, simple data transfer between all your components and a helluva lot more.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;People all over the world have already written tons of packages to do all sorts of stuff with every obscure component imaginable, and the majority of that software is open source!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-will-this-post-teach-me&quot;&gt;WHAT WILL THIS POST TEACH ME?&lt;/h2&gt;

&lt;p&gt;You will be able to use python to write basic ROS pubsub programs, or at the very least you’ll understand how ROS works. Hopefully you don’t understand it well enough to figure out that I only need one-fifth of my proposed project deadline to finish said project.&lt;/p&gt;

&lt;p&gt;However, sadly I will not dig into the GUI elements like Gazebo and rqt because that is more elaborate and requires a lot more time to teach properly. Perhaps another time.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;INTRODUCTION&lt;/h2&gt;

&lt;p&gt;A robotic system running on ROS software is made up of several &lt;strong&gt;nodes&lt;/strong&gt;. Each node is responsible for exactly &lt;strong&gt;one&lt;/strong&gt; purpose, like controlling the speed, or the steering wheel or a camera. Nodes can talk to each other and function as one entity through &lt;strong&gt;pubsub&lt;/strong&gt;, &lt;strong&gt;services&lt;/strong&gt;, &lt;strong&gt;actions&lt;/strong&gt; or &lt;strong&gt;parameters&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;you-just-bombarded-me-with-big-words-what-do-they-mean&quot;&gt;You just bombarded me with big words, what do they mean?&lt;/h3&gt;

&lt;p&gt;When you subscribe to a magazine on some topic, the publisher periodically sends you the exact magazine you subscribed for. However you as a subscriber cannot send anything to the publisher. This is exactly what happens between nodes. node 1 can subscribe to node 2 on a particular topic, which means that node 1 can listen to node 2 talk about that particular topic. Nodes are free to publish or subscribe to as many other nodes as they want but the communication along a single connection is always one way. A service is not much different except now the communication is two way kind of like a client-server interface and the server provides whatever data the client requests.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Nodes-TopicandService.gif&quot; alt=&quot;Nodes-TopicandService&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An action is same as a service but it is not blocking, which means that the client can do whatever it wants while it waits for a response from the action server. Parameters are global variables that all nodes can access (and very rarely modify).&lt;/p&gt;

&lt;h2 id=&quot;enough-theory-lets-jump-in&quot;&gt;ENOUGH THEORY, LETS JUMP IN&lt;/h2&gt;

&lt;p&gt;The rclpy library, contains everything you need to write and run elegant systems in ROS. To start with, lets make a node that does nothing, just to become familiar with the syntax. Then we will move on to two nodes, one that publishes magazine issues periodically and another that subscribes to the publisher and recieves the issues as they are sent out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First load up your ROS environment variables by sourcing the setup&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik ros2-osx % &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;setup.zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;simple-node&quot;&gt;SIMPLE NODE&lt;/h3&gt;

&lt;h4 id=&quot;execution&quot;&gt;Execution&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik tutorial % python3.8 first_node.py
just sits pretty &lt;span class=&quot;k&quot;&gt;until &lt;/span&gt;i hit Control-C
^C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;code&quot;&gt;Code&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy.node&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'my_first_node'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let us dissect this,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy.node&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Self explanatory, first we import the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rclpy&lt;/code&gt; library and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node&lt;/code&gt; class,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'my_first_node'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We initiate the library and then instantiate our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node&lt;/code&gt;,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we just instantiate our node and dont put this line the program execution will stop there. If we want to keep our node running until we kill it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Control-C&lt;/code&gt; or otherwise, this must be used.&lt;/p&gt;

&lt;p&gt;Congratulations you just learnt to write a node! Lets move on to something more advanced.&lt;/p&gt;

&lt;p&gt;Now we will write a two nodes that send magazine issues using pubsub!
The publisher will send magazine issues as a string and the subscriber will recieve them in realtime.&lt;/p&gt;

&lt;h3 id=&quot;publisher&quot;&gt;PUBLISHER&lt;/h3&gt;

&lt;h4 id=&quot;execution-1&quot;&gt;Execution&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik first_pubsub % python3.8 publisher.py
Sending: issue number 1
Sending: issue number 2
Sending: issue number 3
Sending: issue number 4
Sending: issue number 5
Sending: issue number 6
^C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;code-1&quot;&gt;Code&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy.node&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std_msgs.msg&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MagazinePublisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'magazine_publisher'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playboy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;s&quot;&gt;'fashion'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timer_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'issue number '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playboy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Sending: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;magazine_publisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MagazinePublisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magazine_publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Commencing surgery,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpyfrom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Node&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std_msgs.msg&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Apart from our usual imports there is a new one. In this project we are not only creating a node but also sending stuff which needs to be in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; class (not to be confused with the string data type). The actual message goes in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String.data&lt;/code&gt;,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MagazinePublisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;    
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;        
    &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'magazine_publisher'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playboy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                 
                                         &lt;span class=&quot;s&quot;&gt;'fashion'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                
                                         &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we declare our publisher class that declares itself as a Node by the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magazine_publisher&lt;/code&gt;, and publishing on the topic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fashion&lt;/code&gt;  &lt;del&gt;Didn’t know what else to call playboy sorry&lt;/del&gt; with a buffer size of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timer&lt;/code&gt; that calls our sender function every 1 second.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timer_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'issue number '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playboy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Sending: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This function gets called by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timer&lt;/code&gt; every second. It uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playboy&lt;/code&gt; object to send magazine issues as messages.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;magazine_publisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MagazinePublisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magazine_publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Like the first node we initiate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rclpy&lt;/code&gt; then instantiate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MagazinePublisher&lt;/code&gt; and spin it.&lt;/p&gt;

&lt;h3 id=&quot;subscriber&quot;&gt;SUBSCRIBER&lt;/h3&gt;

&lt;h4 id=&quot;execution-2&quot;&gt;Execution&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik first_pubsub % python3.8 subscriber.py
Recieved issue number 1
Recieved issue number 2
Recieved issue number 3
Recieved issue number 4
Recieved issue number 5
Recieved issue number 6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;code-2&quot;&gt;Code&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy.node&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std_msgs.msg&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MagazineSubscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'magazine_subscriber'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'fashion'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listener_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Recieved '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;magazine_subscriber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MagazineSubscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magazine_subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscriber&lt;/code&gt; only recieves the message and prints it out so its relatively simple.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rclpy.node&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std_msgs.msg&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Familiar imports.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MagazineSubscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'magazine_subscriber'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'fashion'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Making a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscriber&lt;/code&gt; class and instantiating its parent with the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magazine_subscriber&lt;/code&gt; . We then create a subription to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fashion&lt;/code&gt; topic to recieve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; data, with a buffer time of 10 (&lt;em&gt;doesn’t matter as long as the callback function does not take too long to execute&lt;/em&gt;). And whenever a message is recieved &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;listener_callback&lt;/code&gt; function is called.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listener_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Recieved '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;listener_callback&lt;/code&gt; function we simply print the recieved message. meh&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;magazine_subscriber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MagazineSubscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magazine_subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Familiar routine to run once and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spin&lt;/code&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscriber&lt;/code&gt; forever.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOW CAN THIS BE USED TO CONTROL AN RC CAR?&lt;/strong&gt;  &lt;sup&gt; yep &lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;packages&quot;&gt;PACKAGES&lt;/h2&gt;

&lt;p&gt;The actual beauty of ROS lies in its package system. Upto this point we were using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3.8&lt;/code&gt; to run our scripts but basically any ROS software can be converted into sort of an executable package which can then be directly run without even mentioning the language.&lt;/p&gt;

&lt;p&gt;Ideally you would start writing your code inside an empty project and once done just run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;colcon build&lt;/code&gt; in the project root and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source project_root/install/setup.zsh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lets try converting our magazine pubsub to a package,&lt;/p&gt;

&lt;h3 id=&quot;creating-and-running-a-package&quot;&gt;CREATING AND RUNNING A PACKAGE&lt;/h3&gt;

&lt;h4 id=&quot;step-1&quot;&gt;STEP-1:&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catkin_ws/src&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik ros2-osx % &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;catkin_ws/src
Kaushik src % &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/Users/Kaushik/ros2_foxy/ros2-osx/catkin_ws/src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create an empty package using the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ros2 pkg create --build-type ament_python magazine&lt;/code&gt; . You should now see a new magazine directory. This is called the &lt;strong&gt;project root&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik src % ros2 pkg create &lt;span class=&quot;nt&quot;&gt;--build-type&lt;/span&gt; ament_python magazine
going to create a new package
package name: magazine
destination directory: /Users/Kaushik/ros2_foxy/ros2-osx/catkin_ws/src
package format: 3
version: 0.0.0
description: TODO: Package description
maintainer: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Kaushik &amp;lt;kaushik.sivashankar@gmail.com&amp;gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
licenses: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'TODO: License declaration'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
build &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: ament_python
dependencies: &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
creating folder ./magazine
creating ./magazine/package.xml
creating &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;folder
creating folder ./magazine/magazine
creating ./magazine/setup.py
creating ./magazine/setup.cfg
creating folder ./magazine/resource
creating ./magazine/resource/magazine
creating ./magazine/magazine/__init__.py
creating folder ./magazine/test
creating ./magazine/test/test_copyright.py
creating ./magazine/test/test_flake8.py
creating ./magazine/test/test_pep257.py
Kaushik src % &lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;examples        magazine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magazine&lt;/code&gt; has a structure like,&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik src % tree magazine
magazine
├── magazine
│   └── __init__.py
├── package.xml
├── resource
│   └── magazine
├── setup.cfg
├── setup.py
└── &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
    ├── test_copyright.py
    ├── test_flake8.py
    └── test_pep257.py

3 directories, 8 files

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;step-2&quot;&gt;STEP-2:&lt;/h4&gt;

&lt;p&gt;Awesome now lets move our publisher and subscriber scripts into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magazine/magazine&lt;/code&gt;. All of your nodes need to be in this &lt;package_name&gt;/&lt;package_name&gt; script. ezpz&lt;/package_name&gt;&lt;/package_name&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik magazine % &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;magazine
Kaushik magazine % &lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; ../../../../../tutorial/first_pubsub/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Kaushik magazine % &lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;__init__.py     publisher.py    subscriber.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;step-3&quot;&gt;STEP-3:&lt;/h4&gt;

&lt;p&gt;Now we must register the two scripts to be built into executables in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.py&lt;/code&gt; of the project’s root.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;entry_points&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;'console_scripts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;'publisher = magazine.publisher:main'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;'subscriber = magazine.subscriber:main'&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And lastly,&lt;/p&gt;

&lt;h4 id=&quot;step-4&quot;&gt;STEP-4:&lt;/h4&gt;

&lt;p&gt;We must tell the ament build system that we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rclpy&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std_msgs&lt;/code&gt; as dependencies that also need to be built into executables.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ament_python&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_depend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rclpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_depend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_depend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std_msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_depend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;step-5&quot;&gt;STEP-5:&lt;/h4&gt;

&lt;p&gt;Awesome! Lets build it up! Simply navigate back to project root and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;colcon build&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik magazine % &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/Users/Kaushik/ros2_foxy/ros2-osx/catkin_ws/src/magazine
Kaushik magazine % colcon build
Starting &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; magazine
Finished &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; magazine &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2.17s]

Summary: 1 package finished &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;3.21s]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yay! We built the package! You should now see a new install folder in project root. Now simply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source install/setup.zsh&lt;/code&gt; to add our new executable to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt;. Now we can run it using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ros2 run &amp;lt;package_name&amp;gt; &amp;lt;node_name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kaushik magazine % &lt;span class=&quot;nb&quot;&gt;source install&lt;/span&gt;/setup.zsh
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;connext_cmake_module] Warning: The location at which Connext was found when the workspace was built &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;/Applications/rti_connext_dds-5.3.1]] does not point to a valid directory, and the NDDSHOME environment variable has not been set. Support &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Connext will not be available.

Kaushik magazine % ros2 run magazine publisher
Sending: issue number 1
Sending: issue number 2
Sending: issue number 3
Sending: issue number 4
^C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lets quickly recap what we just did.&lt;/p&gt;

&lt;p&gt;I really wanted to include services and rqt and gazibo but that has tons of stuff, requires more time and a slight learning curve only makes it more foreign and boring to audience that isnt 100% interested. Maybe I can cover that in a separate session.&lt;/p&gt;

</description>
        <pubDate>Tue, 01 Jun 2021 00:00:00 +0530</pubDate>
        <link>/savvy/programming/2021/06/01/ros-for-dummies.html</link>
        <guid isPermaLink="true">/savvy/programming/2021/06/01/ros-for-dummies.html</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Tmux Shortcuts</title>
        <description>&lt;p&gt;ctrl-B     ← prefix&lt;/p&gt;

&lt;p&gt;prefix % ← split with vertical line&lt;/p&gt;

&lt;p&gt;prefix “   ← split with horizontal line&lt;/p&gt;

&lt;p&gt;prefix x  ← kill pane&lt;/p&gt;

&lt;p&gt;prefix c ← new window&lt;/p&gt;

&lt;p&gt;prefix p ← move to previous window&lt;/p&gt;

&lt;p&gt;prefix n ← move to next window&lt;/p&gt;

&lt;p&gt;prefix d ← detach&lt;/p&gt;

&lt;p&gt;prefix z ← toggle pane full screen&lt;/p&gt;

&lt;p&gt;prefix q ← show pane numbers; type number to go to pane&lt;/p&gt;

&lt;p&gt;prefix , ← rename window&lt;/p&gt;

&lt;p&gt;prefix $ ← rename session&lt;/p&gt;

&lt;p&gt;prefix s ← list session&lt;/p&gt;

&lt;p&gt;prefix ‘ # ← jump to # window&lt;/p&gt;

&lt;p&gt;prefix ! ← send pane to new window&lt;/p&gt;

&lt;p&gt;prefix &amp;amp; ← kill window&lt;/p&gt;

&lt;p&gt;prefix t ← big clock&lt;/p&gt;

&lt;p&gt;prefix o ← swap panes&lt;/p&gt;

&lt;p&gt;prefix { ← move current pane left&lt;/p&gt;

&lt;p&gt;prefix } ← move current pane right&lt;/p&gt;

&lt;p&gt;:setw synchronize-panes on ← sync panes&lt;/p&gt;
</description>
        <pubDate>Mon, 31 May 2021 00:00:00 +0530</pubDate>
        <link>/savvy/terminal/2021/05/31/tmux-notes.html</link>
        <guid isPermaLink="true">/savvy/terminal/2021/05/31/tmux-notes.html</guid>
        
        
        <category>Terminal</category>
        
      </item>
    
      <item>
        <title>Github For Dummies</title>
        <description>&lt;p&gt;Git was created in 1995 by Linus Torvalds, the creator of Linux, when he was frustrated by existing version control systems. But what exactly is a &lt;em&gt;version control system&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Suppose you are working on a huge software project, and at some point, after making several changes you run the program and it just crashes. You had closed all your editors before so you can’t hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Control-Z&lt;/code&gt; and simply undo your changes. What do you do now?&lt;/p&gt;

&lt;p&gt;The correct answer is: &lt;em&gt;run it again and again until it works&lt;/em&gt;. To avoid a situation like this, you should use git. With git you can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; your changes which means you can create a checkpoint  , which can be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reset&lt;/code&gt; to later, if the need arises. Lets see how this is done.&lt;/p&gt;

&lt;p&gt;Open up your git-bash or any shell that has git installed. Now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; into the directory where you want to initialize your git repository and hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt;. If you see something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Initialized empty Git repository in path&lt;/code&gt;, this was successful. Now this git repository will track any changes you tell it to &lt;strong&gt;within&lt;/strong&gt; this directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-14 at 12.37.46 PM.png&quot; alt=&quot;Screenshot 2021-05-14 at 12.37.46 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets write a script that shows us the current time.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'%H:%m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great now lets make a commit by first adding it to the stage using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt; and then commit your stage using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-14 at 12.55.47 PM.png&quot; alt=&quot;Screenshot 2021-05-14 at 12.55.47 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Great. You’ve made your first commit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot%202021-05-14%20at%2012.57.04%20PM.png&quot; alt=&quot;Screenshot 2021-05-14 at 12.57.04 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AHHHHHHHHH I deliberately deleted my script using rm. The shell has nothing like Recycle Bin, OH NO What do I do now?!&lt;/p&gt;

&lt;p&gt;Your commits are identified by their &lt;em&gt;hashes&lt;/em&gt;. To grab this previous commit’s hash hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-14 at 12.59.44 PM.png&quot; alt=&quot;Screenshot 2021-05-14 at 12.59.44 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So my commit’s hash is  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cfe234cd49925d39a9d5a3895a7e3298e741f116&lt;/code&gt;. Yours will differ.&lt;/p&gt;

&lt;p&gt;Now you can reset to this commit using&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset --hard cfe234cd49925d39a9d5a3895a7e3298e741f116&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Awesome we have our show_time back.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-14 at 1.11.13 PM.png&quot; alt=&quot;Screenshot 2021-05-14 at 1.11.13 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now what if you made a commit you didn’t mean to make? How would you delete this commit without hard resetting to it? Simple. You &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;soft&lt;/code&gt; reset.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-14 at 1.15.06 PM.png&quot; alt=&quot;Screenshot 2021-05-14 at 1.15.06 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So now run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; to grab the hash of the commit you want to soft reset to.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-14 at 1.15.36 PM.png&quot; alt=&quot;Screenshot 2021-05-14 at 1.15.36 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So once more we want to soft reset to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;added show_time&lt;/code&gt; commit. So simply run&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset --soft cfe234cd49925d39a9d5a3895a7e3298e741f116&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Running git log again can verify that we have deleted that commit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-14 at 1.18.36 PM.png&quot; alt=&quot;Screenshot 2021-05-14 at 1.18.36 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets move to Github!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-15 at 11.48.58 AM.png&quot; alt=&quot;Screenshot 2021-05-15 at 11.48.58 AM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First off, if you don’t have dark mode on, quickly click the button on google meet that looks like a red sideways telephone.&lt;/p&gt;

&lt;p&gt;Otherwise we can proceed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloning&lt;/code&gt; someone’s repo! First copy the repo url.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-15 at 12.21.54 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.21.54 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;then hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone https://github.com/k4u5h1k/Games.git&lt;/code&gt; to clone the repo within the current directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-15 at 12.27.31 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.27.31 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets each make a github repo of our own and clone them. To make a repo hit the plus on the top right and click on new repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-15 at 12.33.24 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.33.24 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fill in the details and hit Create repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-15 at 12.37.49 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.37.49 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You have created your first repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-15 at 12.38.18 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.38.18 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looks good. Lets clone this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-15 at 12.40.15 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.40.15 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now move your show_time script into our cloned directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-15 at 12.40.38 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.40.38 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now make a commit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-15 at 12.43.19 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.43.19 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And push it to github using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-15 at 12.43.54 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.43.54 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can refresh your github repo page and show_time.py should appear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-15 at 12.47.13 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 12.47.13 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now what if we want to work with someone else’s repository. To do this we have two options.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Simply clone their repo locally and use their code however you want.&lt;/p&gt;

    &lt;p&gt;But in this option you will not be able to push to github because you are not allowed to push to their repo.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a fork&lt;/p&gt;

    &lt;p&gt;forking a repo means creating a copy of the original repo in your account. This will allow you to make changes to the code and push it to your fork without affecting the original repository.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To fork a repo you can click on the fork button on the top right&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-15 at 1.08.36 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 1.08.36 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now create a fork of the DNT apis repo. Go to https://github.com/dreadnoughtrobotics/DNT-apis and hit fork.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-15 at 1.10.27 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 1.10.27 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This should create a fork of the original repo in your account. You can now clone this repo and make whatever changes you want.&lt;/p&gt;

&lt;p&gt;But what if you have made a change or wrote a new feature that you think will benefit our origin repo? You make a &lt;strong&gt;Pull Request&lt;/strong&gt; (PR).&lt;/p&gt;

&lt;p&gt;Once you make your PR the maintainers will review it, or suggest changes if required. Finally they may merge your PR or close it without merging, if they found your addition inappropriate or inadequate.&lt;/p&gt;

&lt;p&gt;Now if someone makes a PR to your project and you accept their changes, how will you apply their changes to your local code? Will you clone the repo again? No. You use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lets make a change to our screen_time repo’s README and pull the change locally.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-15 at 5.18.10 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 5.18.10 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the pen icon here and make changes to the README.&lt;/p&gt;

&lt;p&gt;Then go to your screen_time directory and type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; to get those changes in your local README.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/savvy/assets/images/Screenshot 2021-05-15 at 5.45.46 PM.png&quot; alt=&quot;Screenshot 2021-05-15 at 5.45.46 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You are now equipped with the power of git!&lt;/p&gt;
</description>
        <pubDate>Sun, 30 May 2021 17:06:13 +0530</pubDate>
        <link>/savvy/programming/2021/05/30/github-for-dummies.html</link>
        <guid isPermaLink="true">/savvy/programming/2021/05/30/github-for-dummies.html</guid>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>On Ctrl-C Ctrl-V</title>
        <description>&lt;p&gt;Javascript is extremely powerful, to say the least. One of its often overlooked features is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy&lt;/code&gt; event listener.&lt;/p&gt;

&lt;p&gt;What damage can that do? Here, copy this ‘innocent’ command (&lt;em&gt;meant to be pasted into a shell&lt;/em&gt;) and paste it somewhere.&lt;/p&gt;

&lt;p id=&quot;fakecopy&quot;&gt;&lt;code&gt;$ echo &quot;innocent text&quot;&lt;/code&gt;&lt;/p&gt;

&lt;script&gt;
 document.getElementById('fakecopy').addEventListener('copy', function(e) {
    e.clipboardData.setData('text/plain',
        'echo &quot;This could\'ve be something malicious!😈&quot;\n');
    e.preventDefault();
});
&lt;/script&gt;

&lt;p&gt;The text you just copied even has an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enter&lt;/code&gt; character, so the command will execute automatically if pasted in a shell, and &lt;strong&gt;I will have control over this system before you can even comprehend what just went down&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is how the code works,&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;fakecopy&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clipboardData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;text/plain&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;echo &quot;This could&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ve be something malicious!😈&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Think you’ll be safe if by disabling Javascript? Sorry to burst your bubble but this can also be done with raw CSS.&lt;/p&gt;

&lt;p id=&quot;fakecopy&quot;&gt; &lt;code&gt;$ echo &lt;span style=&quot;font-size: 0;&quot;&gt;; rm -rf / ; echo &lt;/span&gt;&quot;looks safe to me!&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is how that works,&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;font-size: 0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'malicious command'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;looks safe to me!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 29 May 2021 17:00:00 +0530</pubDate>
        <link>/savvy/hacking/2021/05/29/on-Copy-Paste.html</link>
        <guid isPermaLink="true">/savvy/hacking/2021/05/29/on-Copy-Paste.html</guid>
        
        
        <category>Hacking</category>
        
      </item>
    
  </channel>
</rss>
